import {Component, ElementRef, ViewChild} from '@angular/core';
import {AlertController, IonicPage, LoadingController, NavController, NavParams, ViewController} from 'ionic-angular';
import {HttpService} from "../../../../http/http.Service";
import {FormBuilder, FormControl, Validators} from "@angular/forms";
import {ServelUrl} from "../../../../app/ServelUrl";
import {HelpUtils} from "../../../../app/utils/HelpUtils";
import {DomSanitizer} from "@angular/platform-browser";

/**
 * Generated by hanzhendong.
 *
 *  申请请假
 */

declare var moment: any;
declare var antlinker;
declare var Qiniu;
declare var plupload;

@IonicPage()
@Component({
  selector: 'page-leave-apply',
  templateUrl: 'leave-apply.html',
})
export class LeaveApplyPage {
  @ViewChild('StartDate') StartDate: ElementRef;
  @ViewChild('pickfiles') pickfiles: ElementRef;
  fileLoading;
  uploader;
  ValidatorsForm;
  item: any;
  StartFlag: boolean = false;
  EndFlag: boolean = false;
  LeaveTypes: any;
  OutPlaces: any;
  Evidence;
  imgName;
  LeaveApply = {
    LeaveReason: '',
    LeaveType: '',
    Evidence: '',
    StartDate: moment(new Date()).locale('es').format(),
    StartCourse: 0,
    StartSection: '',
    EndDate: moment((new Date(new Date().getTime() + 24 * 60 * 60 * 1000))).locale('es').format(),
    EndCourse: 0,
    EndSection: '',
    ClassNum: '',
    OutPlace: '',
    DetailAddress: '',
    EmergencyPerson: '',
    EmergencyNumber: '',
    AttachmentCode: '',
    AttachmentKey: '',
    RecordId: "",
    FlowRecordId: '',
    imgURL:''
  };
  Year = new Date().getFullYear();
  minDate = moment((new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000))).locale('es').format();
  $HaveXiaoJiaApply: boolean = false;

  constructor(private loadingCtrl: LoadingController, private DomSanitization: DomSanitizer, private params: NavParams, private eleRef: ElementRef, public alertCtrl: AlertController, public viewCtrl: ViewController, private http: HttpService, private formBuilder: FormBuilder, private HelpUtils: HelpUtils, private navCtrl: NavController) {
  console.log(this.pickfiles)
    this.ValidatorsForm = this.formBuilder.group({
      LeaveReason: ['', [Validators.maxLength(30), Validators.required]],
      LeaveType: ['', Validators.required],
      StartDate: ['', Validators.required],
      EndDate: ['', Validators.required],
      ClassNum: ['', Validators.compose([Validators.required, Validators.min(0), Validators.max(99)])],
      OutPlace: ['', Validators.required],
      DetailAddress: ['', [Validators.maxLength(30), Validators.required]],
      EmergencyPerson: ['', Validators.compose([Validators.required, Validators.maxLength(10)])],
      EmergencyNumber: [0, [Validators.required]],
    });

  }

  DateSection(Start) {
    let alert = this.alertCtrl.create({
      title: '课程节次',
      enableBackdropDismiss: false,
      buttons: [
        {
          text: '取消'
        },
        {
          text: '确定',
          handler: data => {
            console.log(data);
            if (!data) {
              this.HelpUtils.toastPop('请选择请假节次！');
              return false;
            }
            if (Start) {
              this.StartFlag = !this.StartFlag;
              this.LeaveApply.StartCourse = data || '';
              this.LeaveApply.StartSection = `${moment(this.LeaveApply.StartDate).format('YYYY-MM-DD HH:mm')}第${data||""}节课`;
            } else {
              this.EndFlag = !this.EndFlag;
              this.LeaveApply.EndCourse = data || '';
              this.LeaveApply.EndSection = `${moment(this.LeaveApply.EndDate).format('YYYY-MM-DD HH:mm')}第${data||''}节课`;
            }

          }
        }
      ]
    });
    for (let i = 1; i <= 12; i++) {
      var obj = {
        type: 'radio',
        label: i.toString(),
        value: i.toString()
      };
      alert.addInput(obj);
    }

    alert.present();
  }
  ngAfterViewInit(){
    console.log(this.pickfiles)
  }
  ChangeDateFlag($event, Start = true) {
    if (Start) {
      this.StartFlag = !this.StartFlag;
      setTimeout(() => {
        let smallBox = this.eleRef.nativeElement.querySelector('#StartDate');
        smallBox.dispatchEvent(new Event('click'));
      }, 50)
    } else {
      this.EndFlag = !this.EndFlag;
      setTimeout(() => {
        let smallBox = this.eleRef.nativeElement.querySelector('#EndDate');
        smallBox.dispatchEvent(new Event('click'));
      }, 50)
    }


  }

  ionViewDidEnter() {
    antlinker.configTitle({
      type: "label",
      title: '请假申请',
      fail: () => {
      },
      success: ''
    });
    antlinker.configTitleButton({
      showClose: true,
      type: "empty",
      success: '',
      fail: () => {
      }
    });
    this.http.postJSON({
      Router: ServelUrl.Url.queryleavetype,
      Method: 'POST',
      Body: {}
    }).then(
      comments => {
        if (!comments.FeedbackCode) {
          this.LeaveTypes = comments.Data;
          this.LeaveTypes.map(el => {
            delete el.BizCode;
          })
        }
      });
    this.http.postJSON({
      Router: ServelUrl.Url.queryleaveoutplace,
      Method: 'POST',
      Body: {}
    }).then(
      comments => {
        if (!comments.FeedbackCode) {
          this.OutPlaces = comments.Data;
          this.OutPlaces.map(el => {
            delete el.BizCode;
          })
        }
      });
    this.http.postJSON({
      Router: ServelUrl.Url.canApply,
      Method: 'POST',
      Body: {}
    }).then(
      comments => {
        if (!comments.FeedbackCode) {
          this.$HaveXiaoJiaApply = comments.Data.Leave ? true : false;
          if (this.$HaveXiaoJiaApply) {
            this.HelpUtils.presentAlert({
              title: '提示',
              subTitle: '您有还未销的假，请先销假！',
              enableBackdropDismiss: false,
              buttons: [
                {
                  text: '取消', role: 'cancel'
                },
                {
                  text: '确定', handler: () => {
                    this.navCtrl.push('ResumeLeaveListPage');
                  }
                }
              ]
            })
          }
        }
      });
    let leaveApply = this.params.get('LeaveApply');
    if (leaveApply) {
      this.setValue(leaveApply);
    }
    let cacheLeaveApply = JSON.parse(localStorage.getItem('LeaveApply'));
    /*if (cacheLeaveApply) {
      this.setValue(cacheLeaveApply);
    }*/
    this.initQiniu();

  }

  setValue(cacheLeaveApply, flag = false) {
    this.LeaveApply.LeaveReason = cacheLeaveApply.LeaveReason;

    this.LeaveApply.LeaveType = cacheLeaveApply.LeaveType;
    this.LeaveApply.OutPlace = cacheLeaveApply.OutPlace;

    this.LeaveApply.StartDate = moment(cacheLeaveApply.StartDate).locale('es').format();
    this.LeaveApply.EndDate = moment(cacheLeaveApply.EndDate).locale('es').format();
    this.LeaveApply.ClassNum = cacheLeaveApply.ClassNum;
    this.LeaveApply.StartCourse = cacheLeaveApply.StartCourse||"";
    this.LeaveApply.EndCourse = cacheLeaveApply.EndCourse||'';
    this.LeaveApply.DetailAddress = cacheLeaveApply.DetailAddress;
    this.LeaveApply.EmergencyPerson = cacheLeaveApply.EmergencyPerson;
    this.LeaveApply.EmergencyNumber = cacheLeaveApply.EmergencyNumber;
    this.LeaveApply.RecordId = cacheLeaveApply.RecordId;
    this.LeaveApply.FlowRecordId = cacheLeaveApply.FlowRecordId;
    this.StartFlag = true;
    this.LeaveApply.StartSection = `${moment(cacheLeaveApply.StartDate).format('YYYY-MM-DD HH:mm')}第${cacheLeaveApply.StartCourse||''}节课`;
    this.EndFlag = true;
    this.LeaveApply.EndSection = `${moment(cacheLeaveApply.EndDate).format('YYYY-MM-DD HH:mm')}第${cacheLeaveApply.EndCourse||''}节课`;
    if (cacheLeaveApply.Evidence) {
      this.http.postJSON({
        Router: ServelUrl.Url.QueryLeaveApplicationPhoto,
        Method: 'POST',
        Body: {
          Evidence: cacheLeaveApply.Evidence
        }
      }).then(
        res => {
          if (!res.FeedbackCode) {
            this.LeaveApply.AttachmentCode=res.Data.AttachmentCode||'';
            this.LeaveApply.AttachmentKey=res.Data.AttachmentUrl||'';
            this.imgName=res.Data.AttachmentName||'';
            this.LeaveApply.imgURL=res.Data.URL||'';
          }
        })

    }
  }

  compareFn(val1, val2) {
    if (val1.Code == val2.Code) {
      return true
    } else {
      return false
    }
  }

  ionViewWillLeave() {
    var event = new MouseEvent('click', {
      'view': window,
      'bubbles': true,
      'cancelable': true
    });
    var d = document.querySelector('ion-backdrop');
    if (d) {
      d.dispatchEvent(event)
    }
    //this.navCtrl.pop({animate: false});
    //localStorage.removeItem('LeaveApply');
  }

  onDetailPage() {
    if (this.$HaveXiaoJiaApply) {
      this.HelpUtils.alert('您有还未销的假，请先销假！');
      return;
    }
    if (!this.LeaveApply.StartCourse) {
      this.HelpUtils.toastPop('请选择请假开始节次！');
      return;
    }
    if (!this.LeaveApply.EndCourse) {
      this.HelpUtils.toastPop('请选择请假结束节次！');
      return;
    }
    if (!this.ValidatorsForm.valid) {
      return;
    }
    let FormValidatorsValue = this.ValidatorsForm.value;
    if (!FormValidatorsValue.LeaveReason.trim()) {
      this.HelpUtils.toastPop('请填写请假原因！');
      return;
    }
    if (!FormValidatorsValue.LeaveType) {
      this.HelpUtils.toastPop('请选择请假类型！');
      return;
    }
    if (!FormValidatorsValue.ClassNum && FormValidatorsValue.ClassNum != 0) {
      this.HelpUtils.toastPop('请填写累计请假节次！');
      return;
    }
    if (!FormValidatorsValue.OutPlace) {
      this.HelpUtils.toastPop('请选择外出地点！');
      return;
    }
    if (!FormValidatorsValue.DetailAddress.trim()) {
      this.HelpUtils.toastPop('请填写详细地址！');
      return;
    }
    if (!FormValidatorsValue.EmergencyPerson.trim()) {
      this.HelpUtils.toastPop('请填写紧急联系人！');
      return;
    }
    if (!FormValidatorsValue.EmergencyNumber) {
      this.HelpUtils.toastPop('请填写紧急联系人电话！');
      return;
    }
    if (this.LeaveApply.StartDate >= this.LeaveApply.EndDate) {
      this.HelpUtils.toastPop('请假开始日期不能大于结束日期或者等于结束日期哦！');
      return;
    }
    this.LeaveApply.StartDate = moment(this.LeaveApply.StartDate).format('YYYY-MM-DD HH:mm');
    this.LeaveApply.EndDate = moment(this.LeaveApply.EndDate).format('YYYY-MM-DD HH:mm');
    this.navCtrl.push('LeaveApplyDetailPage', {LeaveApply: this.LeaveApply}).then(data => {
    }).catch(err => {
    })
  }


  initQiniu() {
    console.log(this.pickfiles.nativeElement)
    this.uploader = Qiniu.uploader({
      runtimes: 'html5,flash,html4',
      browse_button: this.pickfiles.nativeElement.id,
      domain: 'http://qiniu-plupload.qiniudn.com/',
      uptoken_func: (file) => {    // 在需要获取uptoken时，该方法会被调用
        var uptoken = '';
        this.http.postXhr({
          Router: ServelUrl.Url.getUpToken,
          Method: 'POST',
          Body: {
            Name: file.name,
            Size: file.size,
            BizType: "LeaveApplication"
          }
        }, (value) => {
          if (value.Data && value.Data.Proof) {
            this.LeaveApply.AttachmentKey = value.Data.Key || "";
            this.LeaveApply.AttachmentCode = value.Data.AttachmentCode || "";
            uptoken = `${value.Data.Proof}`;
          }
        });
        return uptoken
      },
      // 可以使用该参数来限制上传文件的类型，大小等，该参数以对象的形式传入，它包括三个属性：
      filters: {
        max_file_size: '5mb',
        prevent_duplicates: false,
        // Specify what files to browse for
        mime_types: [
          {title: "Image files", extensions: "jpeg,jpg,gif,png"}, // 限定jpg,gif,png后缀上传
        ]
      },
      save_key: false,
      unique_names: false,
      get_new_uptoken: true,
      max_file_size: '5mb',
      max_retries: 4,
      log_level: 5,
      flash_swf_url: 'assets/lib/Moxie.swf',
      multi_selection: false,
      dragdrop: false,
      chunk_size: '4mb',
      auto_start: true,
      /* resize: {
         quality: 60
       },*/
      init: {
        'Key': (up, file) => {
          // do something with key
          return this.LeaveApply.AttachmentKey || ''
        },
        'FilesAdded': (up, files) => {
          console.log("before chunk upload:", files.name);
          this.fileLoading = this.loadingCtrl.create({
            content: '正在上传，请稍等...'
          });
          this.fileLoading.present();
        },
        'BeforeUpload': (up, file) => {
          //上传之前可能的操作

        },
        'UploadProgress': function (up, file) {
        },
        'FileUploaded': (up, file, info) => {
          //var domain = up.getOption('domain');
          //var res = JSON.parse(info.response);
          console.log(`文件：${file}`);
          this.LeaveApply.Evidence = file.getNative();
          //var sourceLink = domain + res.key;
        },
        'UploadComplete': () => {
          console.log('上传完成');
          this.fileLoading.dismiss();
        },
        'Error': (up, err, errTip) => {
          //如果报错可能的操作
          console.log(err);
          if (err.code == '-600') {
            this.HelpUtils.toastPop('文件过大，最大为5M!');
          }
        }
      }
    })
  }


  handleFiles($event) {
    if ($event.target.files[0]) {
      this.LeaveApply.Evidence = $event.target.files[0] || '';
    }
  }
}
